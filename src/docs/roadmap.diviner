@title Roadmap and Status
@group intro

Insight into the direction and progress of Phabricator. This document was last
updated **September 14th, 2011**.

= Status =

Phabricator is in an early release stage, but quite usable. The project is under
active development.

= Current Development =

The current focus on Phabricator is primarily feature buildout, particularly in
these applications:

  - **Mercurial**: Mercurial support is actively landing.
  - **Maniphest**: A lot of early adopters are getting into the suite because
    of this tool, and we're continuing to improve it.
  - **Phriction**: We just landed a wiki application, which basically works but
    needs a bunch of improvements.
  - **Feed**: A rough cut of feed landed recently but needs a ton of work.
  - **Projects**: Projects are getting a bit more useful, but we want to
    continue adding features.

= Future Development =

Most of the future work also involves feature buildout. These are projects we're
thinking about in a very early stage, and may not happen or may look completely
different when we implement them:

  - **Hosted/Managed Repositories**: We're starting to develop some features to
    let Phabricator host or manage repositories, since this simplifies and
    unblocks some stuff we'd like to eventually build.
  - **Drydock**: Build infrastructure to let Phabricator manage working copies
    in a scalable way. This is a general piece of infrastructure which enables
    us to build a lot of features, like: sandcastle (your changes are
    automatically pushed to a machine and reviewers can access that machine to
    see them), asynchronous unit testing, watir/selenium testing,
    Differential-managed merging, and web bisect. This is difficult because
    "scalable" is very big and it needs to shard easily across a pool of
    machines. Facebook has a less general version of this which took a long time
    to get working, but it solved a lot of the hard problems so it may be less
    daunting for us.
  - **Testing**: Phabricator has very little test coverage right now and we'd
    like to improve it. But we also want to make sure we're designing the right
    test environment and solving problems like database stubbing in a robust
    way. Facebook ended up with some solutions in this space which had tradeoffs
    and downsides we'd like to avoid.
  - **Importers**: Unclear how much time we want to spend here, but providing
    ways to import from other bug tracking and code review systems could lower
    the barrier to adoption. But this could also be a massive timesuck.
  - **Evangelism**: Phabricator had an intentionally quiet launch because the
    install process wasn't any good and we wanted to get feedback (there were
    other reasons, as well). It's starting to get some traction and feedback
    from people have used it seems to be pretty positive. At some point it may
    be appropriate to spend more time evangelizing it.
  - **Mission**: Phabricator doesn't have a clear mission statement. Do we want
    to develop a revenue model around it? Do we want to actively compete with
    the many other products in this space? For now, improving the software is
    probably the most important thing we can do to achieve any of these goals,
    but we don't currently have a clear long-term vision.

